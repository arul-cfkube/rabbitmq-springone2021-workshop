Step 1: Insall rabbitmq operator
```
kubectl apply -f "https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml"
```
##namespace/rabbitmq-system created

##customresourcedefinition.apiextensions.k8s.io/rabbitmqclusters.rabbitmq.com created

##serviceaccount/rabbitmq-cluster-operator created

##role.rbac.authorization.k8s.io/rabbitmq-cluster-leader-election-role created

##clusterrole.rbac.authorization.k8s.io/rabbitmq-cluster-operator-role created

##rolebinding.rbac.authorization.k8s.io/rabbitmq-cluster-leader-election-rolebinding created

##clusterrolebinding.rbac.authorization.k8s.io/rabbitmq-cluster-operator-rolebinding created

##deployment.apps/rabbitmq-cluster-operator created

Step 2:  Install rabbitmq topology Operrator
```
kubectl apply -f https://github.com/rabbitmq/messaging-topology-operator/releases/latest/download/messaging-topology-operator-with-certmanager.yaml
```
##namespace/rabbitmq-system unchanged

##customresourcedefinition.apiextensions.k8s.io/bindings.rabbitmq.com created

##customresourcedefinition.apiextensions.k8s.io/exchanges.rabbitmq.com created

##customresourcedefinition.apiextensions.k8s.io/federations.rabbitmq.com created

##customresourcedefinition.apiextensions.k8s.io/permissions.rabbitmq.com created

##customresourcedefinition.apiextensions.k8s.io/policies.rabbitmq.com created

##customresourcedefinition.apiextensions.k8s.io/queues.rabbitmq.com created

##customresourcedefinition.apiextensions.k8s.io/schemareplications.rabbitmq.com created

##customresourcedefinition.apiextensions.k8s.io/shovels.rabbitmq.com created

##customresourcedefinition.apiextensions.k8s.io/users.rabbitmq.com created

##customresourcedefinition.apiextensions.k8s.io/vhosts.rabbitmq.com created

##serviceaccount/messaging-topology-operator created

##role.rbac.authorization.k8s.io/messaging-topology-leader-election-role created

##clusterrole.rbac.authorization.k8s.io/messaging-topology-manager-role created

##rolebinding.rbac.authorization.k8s.io/messaging-topology-leader-election-rolebinding created

##clusterrolebinding.rbac.authorization.k8s.io/messaging-topology-manager-rolebinding created

##service/webhook-service created

##deployment.apps/messaging-topology-operator created

##certificate.cert-manager.io/serving-cert created

##issuer.cert-manager.io/selfsigned-issuer created





Step 3:  Verify the pods are in running state

kubectl get po -n rabbitmq-system

NAME                                          READY   STATUS    RESTARTS   AGE

messaging-topology-operator-f74cbdc5f-l96sb   1/1     Running   0          21m

rabbitmq-cluster-operator-598d56f98f-8d8q5    1/1     Running   0          21m




Step 1: Creating a vhost
```
cd /home/ubuntu/rabbitmq-springone2021-workshop/examples/vhosts

kubectl apply -f vhost.yaml
```
##vhost.rabbitmq.com/test-vhost created


Step 2: Creating a user
```
cd /home/ubuntu/rabbitmq-springone2021-workshop/examples/users

kubectl apply -f publish-consume-user.yaml
```
##user.rabbitmq.com/publish-consume-user created

Step 3 : Creating a  lazy Queue

```

cd /home/ubuntu/rabbitmq-springone2021-workshop/examples/queues/

kubectl apply -f lazy-queue.yaml

```

##policy.rabbitmq.com/lazy-queue-policy created

##queue.rabbitmq.com/lazy-queue-example created



Step 4: Creating a quorum Queue
```
cd /home/ubuntu/rabbitmq-springone2021-workshop/examples/queues/

kubectl apply -f quorum-queue.yaml
```
##queue.rabbitmq.com/qq-example created
